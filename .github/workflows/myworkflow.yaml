name: Build and Push

on:
  push:
    branches:
      - 'release/v[0-9]+.[0-9]+'

jobs:
  myjob: 
    
    runs-on: ubuntu-latest

    if: startsWith(github.event.head_commit.message, '#NORUN') == false

    permissions:
      contents: read
      security-events: write
      id-token: write
    
    
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.5.0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2.1.0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.5.0
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Dock meta
      id: docker_meta
      uses: docker/metadata-action@v4.4.0
      with:
        images: ghcr.io/sigstore/sample-honk
        tags: type=sha,format=long
    
    - name: Build and push
      uses: docker/build-push-action@v4.0.0
      id: build-and-push
      with:
        #platforms: linux/amd64,linux/arm/v7,linux/arm64
        push: true
        tags: kericccccc/cicd:${{ github.sha }}
      
    - name: Sign image with a key
      run: |
        images=""
        for tag in ${TAGS}; do
          images+="${tag}@${DIGEST} "
        done
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
      env:
        TAGS: kericccccc/cicd:${{ github.sha }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}


    # - name: Sign the images with GitHub OIDC Token
    #   env:
    #     DIGEST: ${{ steps.build-and-push.outputs.digest }}
    #     TAGS: kericccccc/cicd:${{ github.sha }}
    #   run: |
    #     images=""
    #     for tag in ${TAGS}; do
    #     images+="${tag}@${DIGEST} "
    #     done
    #     cosign sign --yes ${images}
        

    - name: Run Trivy vulnerability scanner in fs mode
      id: trivy-scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        #TEST1
        #severity: 'HIGH,CRITICAL' 
        #TEST2
        severity: 'CRITICAL' 
        # image-ref: 'kericccccc/cicd:${{ github.sha }}'     
        format: 'table' #output as table format
        output: './trivy-report.txt'
      
    # define conditions
    - name: Determine success or failure
      id: determine-status
      run: |
        if [ -s "./trivy-report.txt" ]; then
          echo "::set-output name=status::failure"
        else
          echo "::set-output name=status::success"
        fi

    # Upload
    - name: Upload trivy report as a Github artifact
    # only when failure need upload, otherwise will also display under success
      if: steps.determine-status.outputs.status == 'failure' 
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report
        path: './trivy-report.txt'
        retention-days: 20 # 90 is the default
    
    # Condition 1: FAILURE
    - name: Slack Notification - Failure
      if: steps.determine-status.outputs.status == 'failure'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Failed trivy scan, see uploaded report'
        SLACK_TITLE: Scan failed - Xia Tian
        SLACK_USERNAME: DipSA58 CICD
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} 
        SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
        SLACK_FILE_UPLOAD: './trivy-report.txt'
        initial_comment: 'Scan report by Xia Tian'

    # Condition 2: SUCCESS
    - name: Slack Notification - Success
      if: steps.determine-status.outputs.status == 'success'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACKIFY_MARKDOWN: 'true'
        SLACK_COLOR: 'success'
        SLACK_TITLE: Image build and signed
        SLACK_USERNAME: DipSA58 CICD
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} 
        SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
        SLACK_MESSAGE: 
          '**Name**: XIA TIAN \n
          **Metriculation**: A0191771Y \n
          **Email**: [tian_xia@u.nus.edu](tian_xia@u.nus.edu) \n
          **Git**: ${{ github.server_url }}/${{ github.repository }} \n
          **Image**: https://hub.docker.com/repository/docker/kericccccc/cicd/general'


        